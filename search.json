[{"title":"new","url":"http://atwoodduan.github.io/2016/12/23/new/","content":"","categories":[],"tags":[]},{"title":"Hello World","url":"http://atwoodduan.github.io/2016/12/23/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"k-近邻算法","url":"http://atwoodduan.github.io/2016/12/22/k-邻近算法/","content":"<p>创建一个测试用的生成数据函数，其中group为数据集，labels为数据集中每个元素所对应的类别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*- coding: UTF-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">import</span> operator </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    group = array([[<span class=\"number\">1.0</span>,<span class=\"number\">1.1</span>],[<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0.1</span>]])</div><div class=\"line\">    labels = [<span class=\"string\">'A'</span>,<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'B'</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> group,labels</div></pre></td></tr></table></figure>\n<h2 id=\"kNN的基本实现代码\"><a href=\"#kNN的基本实现代码\" class=\"headerlink\" title=\"kNN的基本实现代码\"></a>kNN的基本实现代码</h2><p>对未知类别属性的数据集中的每个点依次执行以下操作<br>(1)计算已知类别数据集中的点与当前点之间的距离；<br>(2)按照距离递增次序排序；<br>(3)选取与当前点距离最小的k个点；<br>(4)确定前灸个点所在类别的出现频率；<br>(5)返回前女个点出现频率最高的类别作为当前点的预测分类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify0</span><span class=\"params\">(inX, dataSet, labels, k)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#计算距离</span></div><div class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]<span class=\"comment\">#它的功能是读取矩阵的长度，比如shape[0]就是读取矩阵第一维度的长度</span></div><div class=\"line\">    diffMat = tile(inX, (dataSetSize,<span class=\"number\">1</span>)) - dataSet<span class=\"comment\">#tile是重复函数，参数是各个维度重复的次数</span></div><div class=\"line\">    sqDiffMat = diffMat**<span class=\"number\">2</span></div><div class=\"line\">    sqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)<span class=\"comment\">#axis=0, 表示列。</span></div><div class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span></div><div class=\"line\">    <span class=\"comment\">#选择距离最小的k个点</span></div><div class=\"line\">    sortedDistIndicies = distances.argsort()<span class=\"comment\">#返回递增的下标     </span></div><div class=\"line\">    classCount=&#123;&#125;          </div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</div><div class=\"line\">        voteIlabel = labels[sortedDistIndicies[i]]</div><div class=\"line\">        classCount[voteIlabel] = classCount.get(voteIlabel,<span class=\"number\">0</span>) + <span class=\"number\">1</span><span class=\"comment\">#字典取值函数 dict.get(key, default=None)</span></div><div class=\"line\">    <span class=\"comment\">#operator.itemgetter函数获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值</span></div><div class=\"line\">    <span class=\"comment\">#b=operator.itemgetter(1)      //定义函数b，获取对象的第1个域的值</span></div><div class=\"line\">    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<p>使用以上创建的两个函数就可以简单的看到kNN的实现原理了。数据集中只有4个数据，[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]。前两位A类，后两个为B类<br>显然的是，[0.1,0.1]应该为B类，[1.2,1.2]应该为A类</p>\n<p>加一个图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">group,labels = createDataSet()</div><div class=\"line\">classify0([<span class=\"number\">0</span>,<span class=\"number\">0</span>],group,labels,<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<pre><code>&apos;B&apos;\n</code></pre><h2 id=\"使用k-邻近算法改进约会网站的配对效果\"><a href=\"#使用k-邻近算法改进约会网站的配对效果\" class=\"headerlink\" title=\"使用k-邻近算法改进约会网站的配对效果\"></a>使用k-邻近算法改进约会网站的配对效果</h2><h3 id=\"准备数据：从文本文件中解析数据\"><a href=\"#准备数据：从文本文件中解析数据\" class=\"headerlink\" title=\"准备数据：从文本文件中解析数据\"></a>准备数据：从文本文件中解析数据</h3><p>海伦收集约会数据巳经有了一段时间，她把这些数据存放在文本文件datingTestSet2 中，每个样本数据占据一行，总共有1000行。海伦的样本主要包含以下3种特征：</p>\n<ul>\n<li>每年获得的飞行常客里程数</li>\n<li>玩视频游戏所耗时间百分比</li>\n<li>每周消费的冰淇淋公升数</li>\n</ul>\n<p>另外还有一列是海伦对这些约会对象的分类。将他们分成了三类</p>\n<ul>\n<li>不喜欢的人</li>\n<li>魅力一般的人</li>\n<li>极具魅力的人</li>\n</ul>\n<p>分别用数字1,2,3表示。<br>创建名为file2matrix的函数，以此来处理输人格式问题。该函数的输人为文件名字符串，输出为训练样本矩阵和类标签向量。</p>\n<p><img src=\"http://p1.bpimg.com/567571/ce29e2b9c42cb77a.png\" alt=\"\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">file2matrix</span><span class=\"params\">(filename)</span>:</span></div><div class=\"line\">    fr = open(filename)</div><div class=\"line\">    numberOfLines = len(fr.readlines())         <span class=\"comment\">#get the number of lines in the file</span></div><div class=\"line\">    returnMat = zeros((numberOfLines,<span class=\"number\">3</span>))        <span class=\"comment\">#prepare matrix to return</span></div><div class=\"line\">    classLabelVector = []                       <span class=\"comment\">#prepare labels return   </span></div><div class=\"line\">    fr = open(filename)</div><div class=\"line\">    index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fr.readlines():</div><div class=\"line\">        line = line.strip()<span class=\"comment\">#开头和结尾删除空格</span></div><div class=\"line\">        listFromLine = line.split(<span class=\"string\">'\\t'</span>)</div><div class=\"line\">        returnMat[index,:] = listFromLine[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</div><div class=\"line\">        classLabelVector.append(int(listFromLine[<span class=\"number\">-1</span>]))</div><div class=\"line\">        index += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> returnMat,classLabelVector</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">datingDataMat,datingLabels = file2matrix(<span class=\"string\">'datingTestSet2.txt'</span>)</div><div class=\"line\">datingDataMat</div></pre></td></tr></table></figure>\n<pre><code>array([[  4.09200000e+04,   8.32697600e+00,   9.53952000e-01],\n       [  1.44880000e+04,   7.15346900e+00,   1.67390400e+00],\n       [  2.60520000e+04,   1.44187100e+00,   8.05124000e-01],\n       ..., \n       [  2.65750000e+04,   1.06501020e+01,   8.66627000e-01],\n       [  4.81110000e+04,   9.13452800e+00,   7.28045000e-01],\n       [  4.37570000e+04,   7.88260100e+00,   1.33244600e+00]])\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">datingLabels[<span class=\"number\">0</span>:<span class=\"number\">20</span>]</div></pre></td></tr></table></figure>\n<pre><code>[3, 2, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3]\n</code></pre><h3 id=\"分析数据：使用Matplotlib创建散点图\"><a href=\"#分析数据：使用Matplotlib创建散点图\" class=\"headerlink\" title=\"分析数据：使用Matplotlib创建散点图\"></a>分析数据：使用Matplotlib创建散点图</h3><p><em>想办法加上图注、横纵坐标</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> matplotlib</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">fig = plt.figure()</div><div class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</div><div class=\"line\">ax.scatter(datingDataMat[:,<span class=\"number\">1</span>], datingDataMat[:,<span class=\"number\">2</span>],<span class=\"number\">15.0</span>*array(datingLabels), <span class=\"number\">15.0</span>*array(datingLabels))</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x7cf1978&gt;\n</code></pre><p><img src=\"output_14_1.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fig = plt.figure()</div><div class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</div><div class=\"line\">ax.scatter(datingDataMat[:,<span class=\"number\">0</span>], datingDataMat[:,<span class=\"number\">1</span>],<span class=\"number\">15.0</span>*array(datingLabels), <span class=\"number\">15.0</span>*array(datingLabels))</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f240b8&gt;\n</code></pre><p><img src=\"output_15_1.png\" alt=\"png\"></p>\n<h3 id=\"准备数据：归一化数据\"><a href=\"#准备数据：归一化数据\" class=\"headerlink\" title=\"准备数据：归一化数据\"></a>准备数据：归一化数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autoNorm</span><span class=\"params\">(dataSet)</span>:</span></div><div class=\"line\">    minVals = dataSet.min(<span class=\"number\">0</span>)<span class=\"comment\">#沿第0维度最小值</span></div><div class=\"line\">    maxVals = dataSet.max(<span class=\"number\">0</span>)<span class=\"comment\">#沿第0维度最大值</span></div><div class=\"line\">    ranges = maxVals - minVals<span class=\"comment\">#值域</span></div><div class=\"line\">    normDataSet = zeros(shape(dataSet))<span class=\"comment\">#创建空间准备填数</span></div><div class=\"line\">    m = dataSet.shape[<span class=\"number\">0</span>]<span class=\"comment\">#第0维度的长度</span></div><div class=\"line\">    normDataSet = dataSet - tile(minVals, (m,<span class=\"number\">1</span>))</div><div class=\"line\">    normDataSet = normDataSet/tile(ranges, (m,<span class=\"number\">1</span>))   <span class=\"comment\">#element wise divide</span></div><div class=\"line\">    <span class=\"keyword\">return</span> normDataSet, ranges, minVals</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">normMat, ranges, minVals = autoNorm(datingDataMat)</div><div class=\"line\">normMat</div></pre></td></tr></table></figure>\n<pre><code>array([[ 0.44832535,  0.39805139,  0.56233353],\n       [ 0.15873259,  0.34195467,  0.98724416],\n       [ 0.28542943,  0.06892523,  0.47449629],\n       ..., \n       [ 0.29115949,  0.50910294,  0.51079493],\n       [ 0.52711097,  0.43665451,  0.4290048 ],\n       [ 0.47940793,  0.3768091 ,  0.78571804]])\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ranges</div></pre></td></tr></table></figure>\n<pre><code>array([  9.12730000e+04,   2.09193490e+01,   1.69436100e+00])\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">minVals</div></pre></td></tr></table></figure>\n<pre><code>array([ 0.      ,  0.      ,  0.001156])\n</code></pre><h3 id=\"测试算法：作为完整程序验证分类器\"><a href=\"#测试算法：作为完整程序验证分类器\" class=\"headerlink\" title=\"测试算法：作为完整程序验证分类器\"></a>测试算法：作为完整程序验证分类器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">datingClassTest</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    hoRatio = <span class=\"number\">0.1</span>      <span class=\"comment\">#hold out 10%</span></div><div class=\"line\">    datingDataMat,datingLabels = file2matrix(<span class=\"string\">'datingTestSet2.txt'</span>)       <span class=\"comment\">#load data setfrom file</span></div><div class=\"line\">    normMat, ranges, minVals = autoNorm(datingDataMat)</div><div class=\"line\">    m = normMat.shape[<span class=\"number\">0</span>]</div><div class=\"line\">    numTestVecs = int(m*hoRatio)</div><div class=\"line\">    errorCount = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numTestVecs):</div><div class=\"line\">        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],<span class=\"number\">10</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"the classifier came back with: %d, the real answer is: %d\"</span> % (classifierResult, datingLabels[i])</div><div class=\"line\">        <span class=\"keyword\">if</span> (classifierResult != datingLabels[i]): errorCount += <span class=\"number\">1.0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"the total error rate is: %f\"</span> % (errorCount/float(numTestVecs))</div><div class=\"line\">    <span class=\"keyword\">print</span> errorCount</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">datingClassTest()</div></pre></td></tr></table></figure>\n<pre><code>the classifier came back with: 3, the real answer is: 3\nthe classifier came back with: 2, the real answer is: 2\nthe classifier came back with: 1, the real answer is: 1\nthe classifier came back with: 1, the real answer is: 1\nthe classifier came back with: 1, the real answer is: 1\nthe classifier came back with: 1, the real answer is: 1\nthe classifier came back with: 3, the real answer is: 3\nthe classifier came back with: 3, the real answer is: 3\nthe classifier came back with: 1, the real answer is: 1\n......\nthe total error rate is: 0.040000\n4.0\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classifyPerson</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    resultList = [<span class=\"string\">'not at all'</span>,<span class=\"string\">'in small doses'</span>,<span class=\"string\">'in large doses'</span>]</div><div class=\"line\">    percentTats = float(raw_input(<span class=\"string\">\"percentage of time spent playing video games?\"</span>))</div><div class=\"line\">    ffMiles = float(raw_input(<span class=\"string\">\"frequent flier miles earned per year?\"</span>))</div><div class=\"line\">    iceCream = float(raw_input(<span class=\"string\">\"liters of ice cream consumed per year?\"</span>))</div><div class=\"line\">    datingDataMat,datingLabels = file2matrix(<span class=\"string\">'datingTestSet2.txt'</span>)</div><div class=\"line\">    normMat, ranges, minVals = autoNorm(datingDataMat)</div><div class=\"line\">    inArr = array([ffMiles, percentTats, iceCream])</div><div class=\"line\">    classifierResult = classify0((inArr - minVals)/ranges, normMat, datingLabels, <span class=\"number\">20</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"You will probably like this person: \"</span>, resultList[classifierResult - <span class=\"number\">1</span>]</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">classifyPerson()</div></pre></td></tr></table></figure>\n<pre><code>percentage of time spent playing video games?10\nfrequent flier miles earned per year?40000\nliters of ice cream consumed per year?1\nYou will probably like this person:  in large doses\n</code></pre><h2 id=\"手写识别系统\"><a href=\"#手写识别系统\" class=\"headerlink\" title=\"手写识别系统\"></a>手写识别系统</h2><h3 id=\"准备数据：将图像转换为测试向量\"><a href=\"#准备数据：将图像转换为测试向量\" class=\"headerlink\" title=\"准备数据：将图像转换为测试向量\"></a>准备数据：将图像转换为测试向量</h3><p>首先编写一段函数img2vector，将图像转换为向量：该函数创建1×1024的二进制数组 ，然后打开给定的文件，循环读出文件的前32行 ，并将每行的头32个字符值存储在Numpy数组中，最后返回数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">img2vector</span><span class=\"params\">(filename)</span>:</span></div><div class=\"line\">    returnVect = zeros((<span class=\"number\">1</span>,<span class=\"number\">1024</span>))</div><div class=\"line\">    fr = open(filename)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>):</div><div class=\"line\">        lineStr = fr.readline()</div><div class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>):</div><div class=\"line\">            returnVect[<span class=\"number\">0</span>,<span class=\"number\">32</span>*i+j] = int(lineStr[j])</div><div class=\"line\">    <span class=\"keyword\">return</span> returnVect</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">testVector = img2vector(<span class=\"string\">'testDigits/2_13.txt'</span>)</div><div class=\"line\">testVector[<span class=\"number\">0</span>,<span class=\"number\">31</span>:<span class=\"number\">64</span>]</div></pre></td></tr></table></figure>\n<pre><code>array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  1.,\n        1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.])\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handwritingClassTest</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    hwLabels = []</div><div class=\"line\">    trainingFileList = os.listdir(<span class=\"string\">'trainingDigits/'</span>)           <span class=\"comment\">#load the training set</span></div><div class=\"line\">    m = len(trainingFileList)</div><div class=\"line\">    trainingMat = zeros((m,<span class=\"number\">1024</span>))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</div><div class=\"line\">        fileNameStr = trainingFileList[i]</div><div class=\"line\">        fileStr = fileNameStr.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>]     <span class=\"comment\">#take off .txt</span></div><div class=\"line\">        classNumStr = int(fileStr.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>])</div><div class=\"line\">        hwLabels.append(classNumStr)</div><div class=\"line\">        trainingMat[i,:] = img2vector(<span class=\"string\">'trainingDigits/%s'</span> % fileNameStr)</div><div class=\"line\">    testFileList = os.listdir(<span class=\"string\">'testDigits'</span>)        <span class=\"comment\">#iterate through the test set</span></div><div class=\"line\">    errorCount = <span class=\"number\">0.0</span></div><div class=\"line\">    mTest = len(testFileList)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(mTest):</div><div class=\"line\">        fileNameStr = testFileList[i]</div><div class=\"line\">        fileStr = fileNameStr.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>]     <span class=\"comment\">#take off .txt</span></div><div class=\"line\">        classNumStr = int(fileStr.split(<span class=\"string\">'_'</span>)[<span class=\"number\">0</span>])</div><div class=\"line\">        vectorUnderTest = img2vector(<span class=\"string\">'testDigits/%s'</span> % fileNameStr)</div><div class=\"line\">        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, <span class=\"number\">3</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"the classifier came back with: %d, the real answer is: %d\"</span> % (classifierResult, classNumStr)</div><div class=\"line\">        <span class=\"keyword\">if</span> (classifierResult != classNumStr): errorCount += <span class=\"number\">1.0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"\\nthe total number of errors is: %d\"</span> % errorCount</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"\\nthe total error rate is: %f\"</span> % (errorCount/float(mTest))</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handwritingClassTest()</div></pre></td></tr></table></figure>\n<pre><code>the classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\nthe classifier came back with: 0, the real answer is: 0\n\n......\n\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\nthe classifier came back with: 9, the real answer is: 9\n\nthe total number of errors is: 11\n\nthe total error rate is: 0.011628\n</code></pre><p><em>配上目录和手写文件的图片</em><br>k-近邻算法的另一个缺陷是它无法给出任何数据的基础结构信息，因此我们也无法知晓平均实例样本和典型实例样本具有什么特征。下一章我们将使用概率测量方法处理分类问题， 该算法可以解决这个问题。</p>\n","categories":["机器学习算法"],"tags":["机器学习算法","Python"]},{"title":"about","url":"http://atwoodduan.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://atwoodduan.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://atwoodduan.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://atwoodduan.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://atwoodduan.github.io/search/index.html","content":"","categories":[],"tags":[]}]